{"version":3,"sources":["components/GameBoard/index.js","components/Card/index.js","components/ScoreBoard.js","App.js","index.js"],"names":["Board","props","react_default","a","createElement","className","children","Card","id","alt","name","src","image","onClick","clickHandler","ScoreBoard","score","topScore","result","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleImageClick","i","state","setState","cards","card","clicked","resetGame","incrementScore","shuffle","length","array","j","Math","floor","random","temp","resetCards","map","_this2","components_ScoreBoard","GameBoard","components_Card","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.9619fd3c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Board(props) {\r\n    return <div className=\"container game-board\">{props.children}</div>;\r\n}\r\n\r\nexport default Board","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"img-div\">\r\n            <img id={props.id}\r\n                alt={props.name}\r\n                src={props.image}\r\n                onClick={() => props.clickHandler(props.id)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nfunction ScoreBoard(props) {\r\n    return (\r\n        <div>\r\n            <h1>Score: <span>{props.score}</span></h1>\r\n            <h1>Top Score: <span>{props.topScore}</span></h1>\r\n            <h1>{props.result}</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreBoard;","import React, { Component } from 'react';\nimport GameBoard from './components/GameBoard';\nimport Card from './components/Card';\nimport ScoreBoard from './components/ScoreBoard';\nimport cards from './cards.json';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards,\n      score: 0,\n      topScore: 0,\n      result: \"\"\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <ScoreBoard score={this.state.score} topScore={this.state.topScore} result={this.state.result} />\n        <GameBoard>\n          {\n            this.state.cards.map(card => (\n              <Card id={card.id} \n                    key={card.id} \n                    image={card.image}\n                    name={card.name}\n                    clickHandler={this.handleImageClick}/>\n            ))\n          }\n        </GameBoard>\n      </div>\n    );\n  }\n\n  handleImageClick = id => {\n    if (this.state.score === 0){\n      this.setState({\n        result: \"\"\n      });\n    }\n\n    // Search cards array for the card that was clicked.\n    for (var i in cards){\n      let card = cards[i];\n      if (card.id === id){\n        // Check if card was already clicked.\n        if (card.clicked === true){\n          this.resetGame();\n        } else {\n          // Update card clicked state.\n          card.clicked = true;\n          this.incrementScore();\n          this.setState({\n            cards: this.shuffle(this.state.cards)\n          });\n        }\n        break;\n      }\n    }\n  }\n  \n  incrementScore = () => {\n    this.setState({\n      score: this.state.score + 1,\n    }, function(){\n      // Update top score if neccessary.\n      if (this.state.score > this.state.topScore){\n        this.setState({\n          topScore: this.state.score\n        });\n      }\n  \n      // Reset game if player successfully selected all cards.\n      if (this.state.score === this.state.cards.length){\n        this.resetGame();\n      }\n    });\n  }\n  \n  shuffle = (array) => {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n  }\n  \n  resetGame = () => {\n    // Reset state of all cards.\n    let resetCards = this.state.cards.map(card => {\n      card.clicked = false;\n      return card;\n    });\n\n    this.setState({\n      result: this.state.score === this.state.cards.length ? \"You Won!\" : \"You Lost!\",\n      score: 0,\n      cards: this.shuffle(resetCards)\n    });\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}