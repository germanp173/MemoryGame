{"version":3,"sources":["utils/bubbles.js","components/GameBoard/index.js","components/Card/index.js","components/ScoreBoard.js","App.js","index.js"],"names":["colors","balls","i","ball","document","createElement","classList","add","style","background","Math","floor","random","length","left","concat","top","transform","width","height","push","body","append","forEach","el","ra","to","x","y","animate","duration","direction","fill","iterations","Infinity","easing","Board","props","react_default","a","className","children","Card","id","alt","name","src","image","onClick","clickHandler","ScoreBoard","score","result","topScore","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleImageClick","state","setState","cards","card","clicked","resetGame","incrementScore","shuffle","array","j","temp","resetCards","map","_this2","components_ScoreBoard","GameBoard","components_Card","key","Component","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.d8e7bd7d.chunk.js","sourcesContent":["// Credit: https://codepen.io/nashvail/pen/wpGgXO\r\n\r\n// Some random colors\r\nconst colors = [\"#3CC157\", \"#2AA7FF\", \"#1B1B1B\", \"#FCBC0F\", \"#F85F36\"];\r\nconst numBalls = 60;\r\nconst max = 100;\r\nconst min = 0;\r\nconst balls = [];\r\n\r\nfor (let i = 0; i < numBalls; i++) {\r\n  let ball = document.createElement(\"div\");\r\n  ball.classList.add(\"ball\");\r\n  ball.style.background = colors[Math.floor(Math.random() * colors.length)];\r\n  var testing = Math.floor(Math.random() * (20-10)) + 10;\r\n  ball.style.left = `${Math.floor(Math.random() * (max-min) + min)}%`;\r\n  ball.style.top = `${Math.floor(Math.random() * (max-min) + min)}%`;\r\n  ball.style.transform = `scale(${Math.random()})`;\r\n  ball.style.width = `${Math.random()}em`;\r\n  ball.style.height = ball.style.width;\r\n  \r\n  balls.push(ball);\r\n  document.body.append(ball);\r\n}\r\n\r\n// Keyframes\r\nballs.forEach((el, i, ra) => {\r\n  let to = {\r\n    x: Math.random() * (i % 2 === 0 ? -11 : 11),\r\n    y: Math.random() * 12\r\n  };\r\n\r\n  let anim = el.animate(\r\n    [\r\n      { transform: \"translate(0, 0)\" },\r\n      { transform: `translate(${to.x}rem, ${to.y}rem)` }\r\n    ],\r\n    {\r\n      duration: (Math.random() + 1) * 2000, // random duration\r\n      direction: \"alternate\",\r\n      fill: \"both\",\r\n      iterations: Infinity,\r\n      easing: \"ease-in-out\"\r\n    }\r\n  );\r\n});\r\n","import React from 'react';\nimport './style.css';\n\nfunction Board(props) {\n    return <div className=\"container game-board\">{props.children}</div>;\n}\n\nexport default Board","import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Card(props) {\r\n    return (\r\n        <div className=\"img-div\">\r\n            <img id={props.id}\r\n                alt={props.name}\r\n                src={props.image}\r\n                onClick={() => props.clickHandler(props.id)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nfunction ScoreBoard(props) {\r\n    return (\r\n        <div className=\"jumbotron text-center text-white\">\r\n            <h2>Memory Game - NBA Edition</h2>\r\n            <p>Click each picture one time!</p>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-4\">\r\n                    <h4>Score: <span>{props.score}</span></h4>\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                    <h4>{props.result}</h4>\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                    <h4>Top Score: <span>{props.topScore}</span></h4>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreBoard;","import React, { Component } from 'react';\nimport GameBoard from './components/GameBoard';\nimport Card from './components/Card';\nimport ScoreBoard from './components/ScoreBoard';\nimport cards from './cards.json';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cards,\n      score: 0,\n      topScore: 0,\n      result: \"\"\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <ScoreBoard score={this.state.score} topScore={this.state.topScore} result={this.state.result} />\n        <GameBoard>\n          {\n            this.state.cards.map(card => (\n              <Card id={card.id} \n                    key={card.id} \n                    image={card.image}\n                    name={card.name}\n                    clickHandler={this.handleImageClick}/>\n            ))\n          }\n        </GameBoard>\n      </div>\n    );\n  }\n\n  handleImageClick = id => {\n    if (this.state.score === 0){\n      this.setState({\n        result: \"\"\n      });\n    }\n\n    // Search cards array for the card that was clicked.\n    for (var i in cards){\n      let card = cards[i];\n      if (card.id === id){\n        // Check if card was already clicked.\n        if (card.clicked === true){\n          this.resetGame();\n        } else {\n          // Update card clicked state.\n          card.clicked = true;\n          this.incrementScore();\n          this.setState({\n            cards: this.shuffle(this.state.cards)\n          });\n        }\n        break;\n      }\n    }\n  }\n  \n  incrementScore = () => {\n    this.setState({\n      score: this.state.score + 1,\n    }, function(){\n      // Update top score if neccessary.\n      if (this.state.score > this.state.topScore){\n        this.setState({\n          topScore: this.state.score\n        });\n      }\n  \n      // Reset game if player successfully selected all cards.\n      if (this.state.score === this.state.cards.length){\n        this.resetGame();\n      }\n    });\n  }\n  \n  shuffle = (array) => {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n  }\n  \n  resetGame = () => {\n    // Reset state of all cards.\n    let resetCards = this.state.cards.map(card => {\n      card.clicked = false;\n      return card;\n    });\n\n    this.setState({\n      result: this.state.score === this.state.cards.length ? \"You Won!\" : \"You Lost!\",\n      score: 0,\n      cards: this.shuffle(resetCards)\n    });\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './utils/bubbles';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}